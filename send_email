import os
import sqlite3
import smtplib
import imghdr
from email.message import EmailMessage
from datetime import datetime

connect = sqlite3.connect(":memory:")
x = connect.cursor()
x.execute("""CREATE TABLE email(
    sender_name TEXT,
    recipient_name TEXT,
    recipient_email TEXT,
    subject TEXT,
    message TEXT,
    attachment TEXT,
    date_sent TEXT);""")
connect.commit()

username = os.environ.get("EMAIL_USERNAME")
password = os.environ.get("EMAIL_PASSWORD")


class Email:
    def send_email_none(self, sender_name, recipient_name, recipient_email, subject, email_message):
        x.execute(
            "INSERT INTO email VALUES(:sender_name,:recipient_name,:recipient_email,:subject,:message,:attachment,:date_sent);", {"sender_name": sender_name, "recipient_name": recipient_name, "recipient_email": recipient_email, "subject": subject, "message": email_message, "attachment": "None", "date_sent": datetime.now()})
        connect.commit()
        message = EmailMessage()
        message["From"] = username
        message["To"] = recipient_email
        message["Subject"] = subject
        message.set_content(email_message)
        with smtplib.SMTP_SSL("smtp.gmail.com", 465) as smtp:
            smtp.login(username, password)
            smtp.send_message(message)
        print("\nYour message to {} has been sent!\n".format(recipient_name))

    def send_email_attachment(self, sender_name, recipient_name, recipient_email, subject, email_message, attachment_name):
        x.execute(
            "INSERT INTO email VALUES(:sender_name,:recipient_name,:recipient_email,:subject,:message,:attachment,:date_sent);", {"sender_name": sender_name, "recipient_name": recipient_name, "recipient_email": recipient_email, "subject": subject, "message": email_message, "attachment": attachment_name, "date_sent": datetime.now()})
        connect.commit()
        message = EmailMessage()
        message["From"] = username
        message["To"] = recipient_email
        message["Subject"] = subject
        message.set_content(email_message)
        path_desktop = "/Users/olivia/Desktop"
        path_downloads = "/Users/olivia/Downloads"
        path_docs = "/Users/olivia/Documents"
        path_gifs = "/Users/olivia/Documents/GIFs"
        if os.path.exists(os.path.join(path_desktop, attachment_name)):
            file_path = os.path.join(path_desktop, attachment_name)
        elif os.path.exists(os.path.join(path_docs, attachment_name)):
            file_path = os.path.join(path_docs, attachment_name)
        elif os.path.exists(os.path.join(path_gifs, attachment_name)):
            file_path = os.path.join(path_gifs, attachment_name)
        elif os.path.exists(os.path.join(path_downloads, attachment_name)):
            file_path = os.path.join(path_downloads, attachment_name)
        with open(file_path, "rb") as file:
            file_data = file.read()
            try:
                file_type = imghdr.what(file.name)
                file_name = attachment_name
                message.add_attachment(file_data, maintype="image",
                                       subtype=file_type, filename=file_name)
            except:
                file_name = attachment_name
                message.add_attachment(
                    file_data, maintype="application", subtype="octet-stream", filename=file_name)
        with smtplib.SMTP_SSL("smtp.gmail.com", 465) as smtp:
            smtp.login(username, password)
            smtp.send_message(message)
        print("\nYour message and attachment have been sent to {}!\n".format(
            recipient_name))

    def send_email_attachments(self, sender_name, recipient_name, recipient_email, subject, email_message, attachment_names):
        x.execute(
            "INSERT INTO email VALUES(:sender_name,:recipient_name,:recipient_email,:subject,:message,:attachment,:date_sent);", {"sender_name": sender_name, "recipient_name": recipient_name, "recipient_email": recipient_email, "subject": subject, "message": email_message, "attachment": attachment_names, "date_sent": datetime.now()})
        connect.commit()
        attachment_names_list = attachment_names.split(",")
        attachment_names_list_final = []
        for name in attachment_names_list:
            attachment_names_list_final.append(name.strip())
        message = EmailMessage()
        message["From"] = username
        message["To"] = recipient_email
        message["Subject"] = subject
        message.set_content(email_message)
        path_desktop = "/Users/olivia/Desktop"
        path_docs = "/Users/olivia/Documents"
        path_gifs = "/Users/olivia/Documents/GIFs"
        path_downloads = "/Users/olivia/Downloads"
        for key in attachment_names_list_final:
            if os.path.exists(os.path.join(path_desktop, key)):
                file_path = os.path.join(path_desktop, key)
            elif os.path.exists(os.path.join(path_docs, key)):
                file_path = os.path.join(path_docs, key)
            elif os.path.exists(os.path.join(path_gifs, key)):
                file_path = os.path.join(path_gifs, key)
            elif os.path.exists(os.path.join(path_downloads, key)):
                file_path = os.path.join(path_downloads, key)
            if file_path != "":
                with open(file_path, "rb") as file:
                    file_data = file.read()
                    try:
                        file_type = imghdr.what(file.name)
                        file_name = key
                        message.add_attachment(
                            file_data, maintype="image", subtype="pic_type", filename=file_name)
                    except:
                        file_name = key
                        message.add_attachment(
                            file_data, maintype="application", subtype="octet-stream", filename=file_name)
            else:
                raise exception
        with smtplib.SMTP_SSL("smtp.gmail.com", 465) as smtp:
            smtp.login(username, password)
            smtp.send_message(message)
            print("\nYour message and attachments have been sent to {}!\n".format(
                recipient_name))

    def view_emails(self, sender_name):
        x.execute("SELECT * FROM email WHERE sender_name LIKE :sender_name;",
                  {"sender_name": sender_name})
        if len(x.fetchall()) > 0:
            x.execute("SELECT * FROM email WHERE sender_name LIKE :sender_name;",
                      {"sender_name": sender_name})
            for entry in x.fetchall():
                sender_name, recipient_name, recipient_email, subject, message, attachment, date_sent = entry
                print("\nSENT TO: {} ({})\nSUBJECT: {}\nMESSAGE: {}\nATTACHMENT: {}\nDATE SENT: {}".format(
                    recipient_name, recipient_email, subject, message, attachment, date_sent))


a = Email()
print("WELCOME!")
while True:
    start = input("\nPLEASE ENTER THE NUMBER THAT CORRESPONDS TO THE ACTION YOU WISH TO TAKE:\n1. Send one email with no attachment\n2. Send one email with an attachment\n3. Send mass email with no attachment\n4. Send mass email with attachment\n5. Send email with multiple attachments\n6. Send mass email with multiple attachments\n7. View emails sent\nPLEASE ENTER THE NUMBER HERE: ")
    if start == "1":
        sender_name = input("\nYour name: ")
        recipient_name = input("Recipient's name: ")
        recipient_email = input("Rcipient's email: ")
        subject = input("Email's subject: ")
        email_message = input("Message: ")
        a.send_email_none(sender_name.title().strip(), recipient_name.title().strip(),
                          recipient_email.strip(), subject.strip(), email_message)
    elif start == "2":
        sender_name = input("\nYour name: ")
        recipient_name = input("Recipient's name: ")
        recipient_email = input("Rcipient's email: ")
        subject = input("Email's subject: ")
        email_message = input("Message: ")
        attachment_name = input("File name : ")
        a.send_email_attachment(sender_name.title().strip(), recipient_name.title().strip(), recipient_email.strip(),
                                subject.strip(), email_message, attachment_name.strip())
    elif start == "3":
        sender_name = input("Your name: ")
        subject = input("Email's subject: ")
        email_message = input("Message: ")
        status = True
        while status == True:
            recipient_name = input("Recipient's name: ")
            recipient_email = input("Recipient's email: ")
            a.send_email_none(sender_name.title().strip(), recipient_name.title().strip(),
                              recipient_email.strip(), subject.strip(), email_message)
            answer = input(
                "Do you want to continue?\n1.Yes\n2. No\nEnter here: ")
            if answer.strip() == "2":
                status = False
    elif start == "4":
        sender_name = input("Your name: ")
        subject = input("Email's subject: ")
        email_message = input("Message: ")
        attachment_name = input("File name : ")
        status = True
        while status == True:
            recipient_name = input("Recipient's name: ")
            recipient_email = input("Recipient's email: ")
            a.send_email_attachment(sender_name.title().strip(), recipient_name.title().strip(), recipient_email.strip(),
                                    subject.strip(), email_message, attachment_name.strip())
            answer = input(
                "Do you want to continue?\n1.Yes\n2. No\nEnter here: ")
            if answer.strip() == "2":
                status = False
    elif start == "5":
        sender_name = input("Your name: ")
        recipient_name = input("Recipient's name: ")
        recipient_email = input("Rcipient's email: ")
        subject = input("Email's subject: ")
        email_message = input("Message: ")
        attachment_names = input("File names: ")
        try:
            a.send_email_attachments(
                sender_name.title().strip(), recipient_name.title().strip(), recipient_email.strip(), subject.strip(), email_message.strip(), attachment_names.strip())
        except:
            print("\nOne of the files you uploaded was invalid! Please try again.\n")
    elif start == "6":
        sender_name = input("Your name: ")
        subject = input("Email's subject: ")
        email_message = input("Message: ")
        attachment_names = input("File names: ")
        status = True
        while status == True:
            recipient_name = input("Recipient's name: ")
            recipient_email = input("Rcipient's email: ")
            try:
                a.send_email_attachments(sender_name.title().strip(), recipient_name.title().strip(), recipient_email.strip(),
                                         subject.strip(), email_message.strip(), attachment_names.strip())
            except:
                print("\nOne of the files you uploaded was invalid! Please try again.\n")
                break
            else:
                answer = input(
                    "Do you want to continue?\n1.Yes\n2. No\nEnter here: ")
            if answer.strip() == "2":
                status = False
    elif start == "7":
        sender_name = input("Your name: ")
        a.view_emails(sender_name.title().strip())
    elif start == "view" or start == "View":
        x.execute("SELECT * FROM email;")
        for entry in x.fetchall():
            sender_name, recipient_name, recipient_email, subject, message, attachment, date_sent = entry
            print("\nSENT TO: {} ({})\nSUBJECT: {}\nMESSAGE: {}\nATTACHMENT: {}\nDATE SENT: {}".format(
                recipient_name, recipient_email, subject, message, attachment, date_sent))
        print("\n")
    else:
        print("This was an invalid input! Please try again.\n")
        break
