import os
import sqlite3
import smtplib
import imghdr
from email.message import EmailMessage
from datetime import datetime

connect = sqlite3.connect(":memory:")
x = connect.cursor()
x.execute("""CREATE TABLE email(
    sender_name TEXT,
    recipient_name TEXT,
    recipient_email TEXT,
    subject TEXT,
    message TEXT,
    attachment TEXT,
    date_sent TEXT);""")
connect.commit()

username = os.environ.get("EMAIL_USERNAME")
password = os.environ.get("EMAIL_PASSWORD")


class Email:
    def send_email_none(self, sender_name, recipient_name, recipient_email, subject, email_message, attachment_name=None, cc=None, bcc=None):
        x.execute(
            "INSERT INTO email VALUES(:sender_name,:recipient_name,:recipient_email,:subject,:message,:attachment,:date_sent);", {"sender_name": sender_name, "recipient_name": recipient_name, "recipient_email": recipient_email, "subject": subject, "message": email_message, "attachment": "None", "date_sent": datetime.now()})
        connect.commit()
        message = EmailMessage()
        message["From"] = username
        message["To"] = recipient_email
        if cc != None:
            message["CC"] = cc
        if bcc != None:
            message["BCC"] = bcc
        message["Subject"] = subject
        message.set_content(email_message)
        with smtplib.SMTP_SSL("smtp.gmail.com", 465) as smtp:
            smtp.login(username, password)
            smtp.send_message(message)
        print("\nYour message to {} has been sent!\n".format(recipient_name))

    def send_email_attachments(self, sender_name, recipient_name, recipient_email, subject, email_message, attachment_names, cc=None, bcc=None):
        x.execute(
            "INSERT INTO email VALUES(:sender_name,:recipient_name,:recipient_email,:subject,:message,:attachment,:date_sent);", {"sender_name": sender_name, "recipient_name": recipient_name, "recipient_email": recipient_email, "subject": subject, "message": email_message, "attachment": attachment_names, "date_sent": datetime.now()})
        connect.commit()
        if "," in attachment_names:
            attachment_names_list = attachment_names.split(",")
            attachment_names_list_final = []
            for name in attachment_names_list:
                attachment_names_list_final.append(name.strip())
        else:
            attachment_names_list_final = []
            attachment_names_list_final.append(attachment_names.strip())
        message = EmailMessage()
        message["From"] = username
        message["To"] = recipient_email
        if cc != None:
            message["CC"] = cc
        if bcc != None:
            message["BCC"] = bcc
        message["Subject"] = subject
        message.set_content(email_message)
        path_desktop = "/Users/olivia/Desktop"
        path_docs = "/Users/olivia/Documents"
        path_gifs = "/Users/olivia/Documents/GIFs"
        path_downloads = "/Users/olivia/Downloads"
        for key in attachment_names_list_final:
            if os.path.exists(os.path.join(path_desktop, key)):
                file_path = os.path.join(path_desktop, key)
            elif os.path.exists(os.path.join(path_docs, key)):
                file_path = os.path.join(path_docs, key)
            elif os.path.exists(os.path.join(path_gifs, key)):
                file_path = os.path.join(path_gifs, key)
            elif os.path.exists(os.path.join(path_downloads, key)):
                file_path = os.path.join(path_downloads, key)
            with open(file_path, "rb") as file:
                file_data = file.read()
                try:
                    file_type = imghdr.what(file.name)
                    file_name = key
                    message.add_attachment(
                        file_data, maintype="image", subtype="pic_type", filename=file_name)
                except:
                    file_name = key
                    message.add_attachment(
                        file_data, maintype="application", subtype="octet-stream", filename=file_name)
        with smtplib.SMTP_SSL("smtp.gmail.com", 465) as smtp:
            smtp.login(username, password)
            smtp.send_message(message)
            print("\nYour message and attachments have been sent to {}!\n".format(
                recipient_name))

    def view_emails(self, sender_name):
        x.execute("SELECT * FROM email WHERE sender_name LIKE :sender_name;",
                  {"sender_name": sender_name})
        if len(x.fetchall()) > 0:
            x.execute("SELECT * FROM email WHERE sender_name LIKE :sender_name;",
                      {"sender_name": sender_name})
            for entry in x.fetchall():
                sender_name, recipient_name, recipient_email, subject, message, attachment, date_sent = entry
                print("\nSENT TO: {} ({})\nSUBJECT: {}\nMESSAGE: {}\nATTACHMENT: {}\nDATE SENT: {}".format(
                    recipient_name, recipient_email, subject, message, attachment, date_sent))


def single_send(function, sender_name, recipient_name, recipient_email, subject, email_message, attachment_name=None):
    if " cc " in recipient_email and " bcc " not in recipient_email:
        email_list = recipient_email.split(" cc ")
        email_final = []
        for email in email_list:
            email_final.append(email.strip())
        email_to = email_final[0]
        email_cc = email_final[-1]
        function(sender_name.title().strip(), recipient_name.title().strip(),
                 email_to.strip(), subject.strip(), email_message, attachment_name, cc=email_cc)
    elif " bcc " in recipient_email and " cc " not in recipient_email:
        email_list = recipient_email.split(" bcc ")
        email_final = []
        for email in email_list:
            email_final.append(email.strip())
        email_to = email_final[0]
        email_bcc = email_final[-1]
        function(sender_name.title().strip(), recipient_name.title().strip(),
                 email_to.strip(), subject.strip(), email_message, attachment_name, bcc=email_bcc)
    elif " cc " in recipient_email and " bcc " in recipient_email:
        email_list_cc = recipient_email.split(" cc ")
        email_list_bcc = email_list_cc[1].split(" bcc ")
        email_final = []
        email_final.append(email_list_cc[0].strip())
        for email in email_list_bcc:
            email_final.append(email.strip())
        email_to = email_final[0]
        email_cc = email_final[1]
        email_bcc = email_final[2]
        function(sender_name.title().strip(), recipient_name.title().strip(),
                 email_to.strip(), subject.strip(), email_message, attachment_name, cc=email_cc, bcc=email_bcc)
    else:
        function(sender_name.title().strip(), recipient_name.title().strip(),
                 recipient_email.strip(), subject.strip(), email_message, attachment_name)


def mass_send(function, sender_name, subject, email_message, attachment_name=None):
    status = True
    email_cc = None
    email_bcc = None
    while status == True:
        recipient_name = input("Recipient's name: ")
        recipient_email = input("Recipient's email: ")
        if " cc " in recipient_email and " bcc " not in recipient_email:
            email_list = recipient_email.split(" cc ")
            email_final = []
            for email in email_list:
                email_final.append(email.strip())
            email_to = email_final[0]
            email_cc = email_final[-1]
            function(sender_name.title().strip(), recipient_name.title().strip(),
                     email_to.strip(), subject.strip(), email_message, attachment_name, cc=email_cc)
        elif " bcc " in recipient_email and " cc " not in recipient_email:
            email_list = recipient_email.split(" bcc ")
            email_final = []
            for email in email_list:
                email_final.append(email.strip())
            email_to = email_final[0]
            email_bcc = email_final[-1]
            function(sender_name.title().strip(), recipient_name.title().strip(),
                     email_to.strip(), subject.strip(), email_message, attachment_name, bcc=email_bcc)
        elif " cc " in recipient_email and " bcc " in recipient_email:
            email_list_cc = recipient_email.split(" cc ")
            email_list_bcc = email_list_cc[1].split(" bcc ")
            email_final = []
            email_final.append(email_list_cc[0].strip())
            for email in email_list_bcc:
                email_final.append(email.strip())
            email_to = email_final[0]
            email_cc = email_final[1]
            email_bcc = email_final[2]
            function(sender_name.title().strip(), recipient_name.title().strip(),
                     email_to.strip(), subject.strip(), email_message, attachment_name, cc=email_cc, bcc=email_bcc)
        else:
            if email_cc != None and email_bcc == None:
                function(sender_name.title().strip(), recipient_name.title().strip(),
                         recipient_email.strip(), subject.strip(), email_message, attachment_name, cc=email_cc)
            elif email_cc == None and email_bcc != None:
                function(sender_name.title().strip(), recipient_name.title().strip(),
                         recipient_email.strip(), subject.strip(), email_message, attachment_name, bcc=email_bcc)
            elif email_cc != None and email_bcc != None:
                function(sender_name.title().strip(), recipient_name.title().strip(),
                         recipient_email.strip(), subject.strip(), email_message, attachment_name, cc=email_cc, bcc=email_bcc)
            else:
                function(sender_name.title().strip(), recipient_name.title().strip(), recipient_email.strip(),
                         subject.strip(), email_message, attachment_name)
        answer = input(
            "Do you want to continue?\n1.Yes\n2. No\nEnter here: ")
        if answer.strip() == "2":
            status = False


a = Email()
print("WELCOME!")
while True:
    start = input("\nPLEASE ENTER THE NUMBER THAT CORRESPONDS TO THE ACTION YOU WISH TO TAKE:\n1. Send one email with no attachment\n2. Send one email with attachments\n3. Send mass email with no attachment\n4. Send mass email with attachments\n5. View emails sent\nPLEASE ENTER THE NUMBER HERE: ")
    if start == "1":
        sender_name = input("Your name: ")
        recipient_name = input("Recipient's name: ")
        recipient_email = input("Rcipient's email: ")
        subject = input("Email's subject: ")
        email_message = input("Message: ")
        single_send(a.send_email_none, sender_name, recipient_name,
                    recipient_email, subject, email_message)
    elif start == "2":
        sender_name = input("Your name: ")
        recipient_name = input("Recipient's name: ")
        recipient_email = input("Rcipient's email: ")
        subject = input("Email's subject: ")
        email_message = input("Message: ")
        attachment_names = input("File names: ")
        single_send(a.send_email_attachments,
                    sender_name, recipient_name, recipient_email, subject, email_message, attachment_name=attachment_names.strip())
    elif start == "3":
        sender_name = input("Your name: ")
        subject = input("Email's subject: ")
        email_message = input("Message: ")
        mass_send(a.send_email_none, sender_name, subject, email_message)
    elif start == "4":
        sender_name = input("Your name: ")
        subject = input("Email's subject: ")
        email_message = input("Message: ")
        attachment_names = input("File name : ")
        mass_send(a.send_email_attachments, sender_name, subject,
                  email_message, attachment_name=attachment_names.strip())
    elif start == "5":
        sender_name = input("Your name: ")
        a.view_emails(sender_name.title().strip())
    elif start == "view" or start == "View":
        x.execute("SELECT * FROM email;")
        for entry in x.fetchall():
            sender_name, recipient_name, recipient_email, subject, message, attachment, date_sent = entry
            print("\nSENT TO: {} ({})\nSUBJECT: {}\nMESSAGE: {}\nATTACHMENT: {}\nDATE SENT: {}".format(
                recipient_name, recipient_email, subject, message, attachment, date_sent))
        print("\n")
    else:
        print("This was an invalid input! Please try again.\n")
        break
