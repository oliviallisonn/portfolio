class Schedule:
  ongoing = {}
  completed = {}
  days = ["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]
  def __init__(self,name,day,task):
    self.name = name
    self.day = day
    self.task = task
    if self.day not in Schedule.days:
      raise exception
    if self.name not in Schedule.ongoing:
      Schedule.ongoing[self.name] = {self.day:[self.task]}
      print("\nNew task added!")
    elif self.name in Schedule.ongoing:
      if day in Schedule.ongoing[name]:
        Schedule.ongoing[name][day].append(self.task)
        print("\nNew task added!")
      elif day not in Schedule.ongoing[name]:
        Schedule.ongoing[name].update({self.day: [self.task]})
        print("\nNew task added!")
  def remove_task (self,name,task):
    status = False
    if name not in Schedule.ongoing and name not in Schedule.completed:
      raise KeyError
    if name in Schedule.ongoing:
      for day in Schedule.days:
        if day in Schedule.ongoing[name]:
          for x in Schedule.ongoing[name][day]:
            if task in x or task == x:
              Schedule.ongoing[name][day].remove(x)
              print("\nTask successfully removed!")
              status = True
              break
    elif name in Schedule.completed and status == False:
      for day in days:
        if day in Schedule.completed[name]:
          for x in Schedule.completed[name][day]:
            if task in x or task == x:
              Schedule.completed[name][day].remove(x)
              print("\nTask successfully removed!")
              break
    else:
      raise TypeError
  def change_status(self,name,task):
    status = False
    if name not in Schedule.ongoing and name not in Schedule.completed:
      raise NameError
    for day in Schedule.days:
      if status == False:
        if name in Schedule.ongoing and day in Schedule.ongoing[name]:
          if len(Schedule.ongoing[name][day]) > 0:
            for x in Schedule.ongoing[name][day]:
              if task in x or task == x:
                if name in Schedule.completed and day in Schedule.completed[name]:
                  Schedule.completed[name][day].append(x)
                  Schedule.ongoing[name][day].remove(x)
                  print("\nTask status successfully changed!")
                  status = True
                  break
                elif name in Schedule.completed and day not in Schedule.completed[name]:     
                  Schedule.completed[name].update({day: [x]})
                  Schedule.ongoing[name][day].remove(x)
                  print("\nTask status successfully changed!")
                  status = True
                  break       
                elif name not in Schedule.completed:
                  Schedule.completed[name] = {day : [x]}
                  print(Schedule.completed)
                  Schedule.ongoing[name][day].remove(x)
                  print("\nTask status successfully changed!")
                  status = True
                  break
    if status == False:
      for day in Schedule.days:
        if status == False:
          if name in Schedule.completed and day in Schedule.completed[name]:
            if len(Schedule.completed[name][day]) > 0:
              for x in Schedule.completed[name][day]:
                if task in x or task == x:
                  if name in Schedule.ongoing and day in Schedule.ongoing[name]:
                    Schedule.ongoing[name][day].append(x)
                    Schedule.completed[name][day].remove(x)
                    print("\nTask status successfully changed!")
                    status = True
                    break
                  elif name in Schedule.ongoing and day not in Schedule.ongoing[name]:
                    Schedule.ongoing[name].update({day:[x]})
                    Schedule.completed[name][day].remove(x)
                    print("\nTask status successfully changed!")
                    status = True
                    break
                  elif name not in Schedule.ongoing:
                    Schedule.ongoing[name] = {day:[x]}
                    Schedule.completed[name][day].remove(x)
                    print("\nTask status successfully changed!")
                    status = True
                    break
    if status == False:
      raise TypeError
  def change_day (self,name,task,new_day):
    status = False
    if name not in Schedule.ongoing and name not in Schedule.completed:
      raise NameError
    if new_day not in Schedule.days:
      raise KeyError
    if name in Schedule.ongoing:
      for day in Schedule.days:
        if status == False:
          if day in Schedule.ongoing[name] and len(Schedule.ongoing[name][day]) > 0:
            for x in Schedule.ongoing[name][day]:
              if task in x or task == x:
                if new_day in Schedule.ongoing[name]:
                  Schedule.ongoing[name][new_day].append(x)
                  Schedule.ongoing[name][day].remove(x)
                  print("\nTask has been moved to {}!",format(new_day))
                  status = True
                  break
                elif new_day not in Schedule.ongoing[name]:
                  Schedule.ongoing[name].update({new_day: [x]})
                  Schedule.ongoing[name][day].remove(x)
                  print("\nTask has been moved to {}!".format(new_day))
                  status = True
                  break
        else:
          break
    if name in Schedule.completed:
      for day in Schedule.days:
        if status == False:
          if day in Schedule.completed[name] and len(Schedule.completed[name][day]) > 0:
            for x in Schedule.completed[name][day]:
              if task in x or task == x:
                if new_day in Schedule.completed[name]:
                  Schedule.completed[name][new_day].append(x)
                  Schedule.completed[name][day].remove(x)
                  print("\nTask has been moved to {}!".format(new_day))
                  status = True
                  break
                elif new_day not in Schedule.completed[name]:
                  Schedule.completed[name].update({new_day: [x]})
                  Schedule.completed[name][day].remove(x)
                  print("\nTask has been successfully moved to {}!".format(new_day))
                  status = True
                  break
          else:
            continue
    if status == False:
      raise TypeError
  def view_day (self,name,day):
    status_ongoing = False
    status_completed = False
    if name not in Schedule.ongoing and name not in Schedule.completed:
      raise NameError
    if day not in Schedule.days:
      raise KeyError
    print("\n{}'S {}:".format(name.upper(), day.upper()))
    if name in Schedule.ongoing and day in Schedule.ongoing[name]:
      if len(Schedule.ongoing[name][day]) > 0:
        print("Pending: ")
        for x in Schedule.ongoing[name][day]:
          print("- {}".format(x))
        status_ongoing = True
    if name in Schedule.completed and day in Schedule.completed[name]:
      if len(Schedule.completed[name][day]) > 0:
        print("Completed: ")
        for x in Schedule.completed[name][day]:
          print("- {}".format(x))
        status_completed = True
    if status_ongoing == False and status_completed == False:
      print("No tasks for this day.")
  def view_week(self,name):
    status_ongoing = False
    status_completed = False
    if name not in Schedule.ongoing and name not in Schedule.completed:
      raise NameError
    print("\n")
    for day in Schedule.days:
      print("{}".format(day.upper()))
      if name in Schedule.ongoing:
        if day in Schedule.ongoing[name] and len(Schedule.ongoing[name][day]) > 0:
          print("Pending Tasks: ")
          for x in Schedule.ongoing[name][day]:
            print("- {}".format(x))
          status_ongoing = True
      if name in Schedule.completed:
        if day in Schedule.completed[name] and len(Schedule.completed[name][day]) > 0:
          print("Completed Tasks: ")
          for x in Schedule.completed[name][day]:
            print("- {}".format(x))
          status_completed = True
      if status_ongoing == False and status_completed == False:
        print("No tasks for this day.")
      status_ongoing = False
      status_completed = False
  def clear_day(self,name,day,to_clear):
    if name not in Schedule.ongoing and name not in Schedule.completed:
      raise NameError
    if day not in Schedule.days:
      raise KeyError
    if to_clear == "Ongoing":
      if name in Schedule.ongoing and day in Schedule.ongoing[name]:
        if len(Schedule.ongoing[name][day]) > 0:
          Schedule.ongoing[name][day] = []
          print("\n{}'s ongoing tasks for {} have been cleared!\n".format(name,day))
        else:
          print("\n{} has no ongoing tasks for {}".format(name,day))
      else:
        print("\n{} have no ongoing tasks for {}".format(name,day))
    elif to_clear == "Completed":
      if name in Schedule.completed and day in Schedule.completed[name]:
        if len(Schedule.completed[name][day]) > 0:
          Schedule.completed[name][day] = []
          print("\n{}'s completed tasks for {} have been cleared!\n".format(name,day))
        else:
          print("\n{} have no completed tasks for {}".format(name,day))
      else:
        print("\n{} have no ongoing tasks for {}".format(name,day))
    elif to_clear == "Both":
      if name in Schedule.ongoing and day in Schedule.ongoing[name]:
        if len(Schedule.ongoing[name][day]) > 0:
          Schedule.ongoing[name][day] = []
          print("\n{}'s ongoing tasks for {} have been cleared!".format(name,day))
      else:
        print("\n{} have no ongoing tasks for {}".format(name,day))
      if name in Schedule.completed and day in Schedule.completed[name]:
        if len(Schedule.completed[name][day]) > 0:
          Schedule.completed[name][day] = []
          print("\n{}'s completed tasks for {} have been cleared!".format(name,day))
      else:
        print("\n{} have no ongoing tasks for {}".format(name,day))
    elif "Ongoing" in to_clear and "Completed" in to_clear:
      if name in Schedule.ongoing and day in Schedule.ongoing[name]:
        if len(Schedule.ongoing[name][day]) > 0:
          Schedule.ongoing[name][day] = []
          print("\n{}'s ongoing tasks for {} have been cleared!".format(name,day))
        else:
          print("\n{} have no ongoing tasks for {}".format(name,day))
      else:
        print("\n{} have no ongoing tasks for {}".format(name,day))
      if name in Schedule.completed and day in Schedule.completed[name]:
        if len(Schedule.completed[name][day]):
          Schedule.completed[name][day] = []
          print("\n{}'s completed tasks for {} have been cleared!\n".format(name,day))
        else:
          print("\n{} have no ongoing tasks for {}".format(name,day))
      else:
        print("\n{} have no ongoing tasks for {}".format(name,day))
  def clear_week(self,name):
    if name not in Schedule.ongoing and name not in Schedule.completed:
      raise NameError
    for day in Schedule.days:
      if name in Schedule.ongoing and day in Schedule.ongoing[name]:
        Schedule.ongoing[name][day] = []
      if name in Schedule.completed and day in Schedule.completed[name]:
        Schedule.completed[name][day] = []
    print("\n{}'s week has been cleared!\n".format(name))
  
print("SCHEDULE MANAGER")
while True:
  start = input("\nPlease choose the number of the action you wish to take:\n1. Add a new task\n2. Remove a task\n3. Change task status\n4. Change task day\n5. View day schedule\n6. View week summary\n7. Clear day\n8. Clear week\nEnter the number here: ")
  name = input("Please enter your name here: ")
  if start == "1":
    task = input("Please enter the new task here: ")
    day = input("Please enter the day here: ")
    #try:
    new_user = Schedule(name.title().strip(" "), day.title().strip(" "), task.lower().strip(" "))
    #except:
      #print("Invalid day input!\n")
  if start == "2":
    task = input("Please enter the task you want to remove: ")
    try:
      new_user.remove_task(name.title().strip(" "), task.lower().strip(" "))
    except KeyError:
      print("This name is not in our database!\n")
    except TypeError:
      print("This task is not in our database!\n")
  if start == "3":
    task = input("Please enter the task that you want to change the status of: ")
    try:
      new_user.change_status(name.title().strip(" "), task.lower().strip(" "))
    except KeyError:
      print("This name is not in our database!\n")
    except NameError:
      print("This name is not in our database!\n")
    #except TypeError:
      #print("Invalid task entered!\n")
  if start == "4":
    task = input("Which task do you want to be moved?: ")
    new_day = input("Which day do you want to move this to?: ")
    try:
      new_user.change_day(name.title().strip(" "),task.lower().strip(" "),new_day.title().strip(" "))
    except NameError:
      print("This name is not in our database!\n")
    except KeyError:
      print("Invalid day entered!\n")
    except TypeError:
      print("This task is not in our database!\n")
  if start == "5":
    day = input("Please enter the day you want to review: ")
    try:
      new_user.view_day(name.title().strip(" "), day.title().strip(" "))
    except NameError:
      print("This name is not in our database!\n")
    except KeyError:
      print("Invalid day input!\n")
  if start == "6":
    try:
      new_user.view_week(name.title().strip(" "))
    except NameError:
      print("This name is not in our database!\n")
  if start == "7":
    day = input("Please enter the day you want to clear: ")
    to_clear = input("Do you want to clear ongoing, completed or both?: ")
    try:
      new_user.clear_day(name.title().strip(" "), day.title().strip(" "), to_clear.title().strip(" "))
    except NameError:
      print("This name is not in our database!\n")
    except KeyError:
      print("Invalid day input!\n")
  if start == "8":
    try:
      new_user.clear_week(name.title().strip(" "))
    except NameError:
      print("This name is not in our database!\n")
