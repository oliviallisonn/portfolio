weekdays = ["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"]

class schedule:
  ongoing = {}
  done = {}
  def __init__(self,name,task,day):
    self.name = name
    self.task = task
    self.day = day
    if self.name not in schedule.ongoing:
      schedule.ongoing[self.name] = {self.day : [self.task]}
    elif self.name in schedule.ongoing and self.day not in schedule.ongoing[self.name]:
      schedule.ongoing[self.name].update({self.day : [self.task]})
    elif self.name in schedule.ongoing and self.day in schedule.ongoing[self.name]:
      schedule.ongoing[self.name][self.day].append(self.task)
    print("Your task has successfully been added!\n")
  def change_status(self,name,task,day):
    if name in schedule.ongoing or name in schedule.done:
      for x in schedule.ongoing[name][day]:
        if task in x or task == x:
          if name not in schedule.done:
            schedule.done[name] = {day : [x]}
            schedule.ongoing[name][day].remove(x)
            print("Status change successful!\n")
            break
        elif name in schedule.done:
          if day in schedule.done[name]:
            schedule.done[name][day].append(x)
            print("Status change successful!\n")
            break
          elif day not in schedule.done[name]:
            schedule.done[name][day] = [x]
            print("Status change successful!\n")
            break
        else:
          raise TypeError
    else:
      raise KeyError
  def remove_task(self,name,day,task,status):
    if name in schedule.ongoing or name in schedule.done:
      if status == "pending":
        for x in schedule.ongoing[name][day]:
          if task in x or task == x:
            schedule.ongoing[name][day].remove(x)
            print("This task has been removed!\n")
            break
      if status == "done":
        for x in schedule.done[name][day]:
          if task in x or task == x:
            schedule.ongoing[name][day].remove(x)
            print("This task has been removed!\n")
            break
    else:
      raise exception
  def view_summary (self,name):
    print("{}'s Week Ahead: ".format(name))
    for day in weekdays:
      print("{}:".format(day.upper()))
      if name in schedule.ongoing:
        if day in schedule.ongoing[name]:
          if len(schedule.ongoing[name][day]) > 0:
            print("Pending Tasks: ")
            for x in schedule.ongoing[name][day]:
              print("- {}".format(x))
      if name in schedule.done:
        if day in schedule.done[name]:
          if len(schedule.done[name][day]) > 0:
            print("Completed Tasks: ")
            for x in schedule.done[name][day]:
              print("- {}".format(x))
    
  def view_day (self,name,day):
    print("{}'s {}".format(name, day))
    if name in schedule.ongoing or name in schedule.done:
      if name in schedule.ongoing:
        if day in schedule.ongoing[name]:
          print("Pending Tasks: ")
          for x in schedule.ongoing[name][day]: 
            print("- {}".format(x))
        else:
          print("Pending: None")
      else:
        print("Pending: None")
      if name in schedule.done:
        if day in schedule.done[name]:
          print("Completed Tasks: ")
          for x in schedule.done[name][day]: 
            print("- {}".format(x))
        else:
          print("Completed: None")
      else:
        print("Completed: None")
    else:
      raise KeyError
    print("\n")
  def clear_week(self,name):
    for day in weekdays:
      schedule.ongoing[name][day] = []
      schedule.done[name][day] = []
    print("Your schedule has been cleared!\n")
  def change_day(self,name,original_day,new_day,task,status):
    if name in schedule.ongoing or name in schedule.done:
      if status == "pending":
        for x in schedule.ongoing[name][original_day]:
          if task in x or task == x:
            if new_day in schedule.ongoing[name]:
              schedule.ongoing[name][new_day] + [x]
              schedule.ongoing[name][original_day].remove(x)
              print("This task has been successfully moved.\n")
              break
            else:
              schedule.ongoing[name][new_day] = [x]
              schedule.ongoing[name][original_day].remove(x)
              print("This task has been successfully moved.\n")
              break
      elif status == "done":
        for x in schedule.done[name][original_day]:
          if task in x or task == x:
            if new_day in schedule.done[name]:
              schedule.done[name][new_day] + [x]
              schedule.done[name][original_day].remove(x)
              print("This task has been successfully moved.\n")
              break
            else:
              schedule.done[name][new_day] = [x]
              schedule.done[name][original_day].remove(x)
              print("This task has been successfully moved.\n")
              break
      else:
        raise TypeError
    else:
      raise KeyError

while True:
  start = input("Please choose the number of the action you wish to take:\n1. Add new task\n2. Change status of existing task\n3. Remove task\n4. Change day of task\n5. View tasks for a certain day\n6. View weekly summary\n7. Clear week\nEnter the number here: ")
  name = input("Please enter your name: ")
  if start == "1":
    task = input("Please enter new task: ")
    day = input("Please enter due day: ")
    if day.title() in weekdays:
      new_user = schedule(name.title().strip(" "), task.lower().strip(" "), day.title().strip(" "))
    else:
      raise exception("Invalid day entered.\n")
  if start == "2":
    task = input("Please enter the task you wish to revise: ")
    day = input("Please choose the day this task was assigned to: ")
    if day.title().strip(" ") in weekdays:
      try:
        new_user.change_status(name.title().strip(" "), task.lower().strip(" "), day.title().strip(" "))
      except TypeError:
        print("This task is not in our database.\n")
      except KeyError:
        print("This name is not in our database.\n")
    else:
      raise exception ("Invalid day entered.\n")
  if start == "3":
    task = input("Please enter the task you wish to remove: ")
    status = input("Was this task pending or done?: ")
    day = input("Please enter the day that this task was listed under: ")
    if day.title().strip(" ") in weekdays:
      try:
        new_user.remove_task(name.title().strip(" "),day.title().strip(" "),task.lower(),status.lower())
      except:
        print("This name cannot be found in the database.\n")
  if start == "4":
    task = input("Which task do you want to move?: ")
    status = input("Was this task pending or done?: ")
    original_day = input("Which day was this originally assigned to?: ")
    new_day = input("Which day do you want this task on?: ")

    try:
      new_user.change_day(name.title().strip(" "), original_day.title().strip(" "), new_day.title().strip(" "), task.lower().strip(" "), status.lower().strip(" "))
    except KeyError:
      print("This name doesn't exist in our database.\n")
    except TypeError:
      print("Invalid status input.\n")
  if start == "5":
    day = input("Please enter the day you wish to review: ")
    if day.title().strip(" ") in weekdays:
      try:
        new_user.view_day(name.title().strip(" "), day.title().strip(" "))
      except:
        print("This name is not in our database.\n")
    else:
      raise exception ("Invalid day entered")
  if start == "6":
    new_user.view_summary(name.title().strip(" "))
  if start == "7":
    new_user.clear_week(name.title().strip(" "))
